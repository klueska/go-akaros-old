#!/usr/bin/env bash
# Copyright 2013 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Trap and exit script if ^C sent
trap "exit 1" INT TERM

KFSROOT="kfs"
BINDIR="${KFSROOT}/bin"
TESTSDIR="${KFSROOT}/gotests"

# Print the usage information for this script
usage()
{
cat << EOF
This script will build and install a list of go programs into the local 'bin'
directory. The go files passed to this script must all be self contained, in
that the entire program is contained in a single file.
usage: $0 options
OPTIONS:
   -h      This is the default option
           Show this message
   -a      Build and install all *.go files in the current directory
   -b      Build and install the list of *.go files that follow this option.
           If you have more than one go file, wrap the list in double quotes
           (e.g. $0 -b "file1.go file2.go file3.go").
   -t      Build and install the specified test packages from \$GOROOT/src/pkg
           If you have more than one test, wrap the list in double quotes
           (e.g. $0 -t "archive/tar bufio").
           If the psuedo test 'all' is specified, then build all tests
   -c      Clean (i.e. remove the 'bin' and 'gotests' directories and all of
           their contents)
   -v      Verbose mode
EOF
}

# Source a local.bash file in case the user wants to put his environment
# variable setup in there
if [ -f ../src/local.bash ]; then
    source ../src/local.bash
fi

# Get the options from the command line
GOPROGS=""
TESTS=""
CLEAN=""
VERBOSE=""
while getopts “hab:t:cv” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         a)
             GOPROGS=`ls *.go`
             ;;
         b)
             GOPROGS="$OPTARG"
             ;;
         c)
             CLEAN=1
             ;;
         t)
             TESTS="$OPTARG"
             ;;
         v)
             VERBOSE=1
             ;;
     esac
done

# If we didn't pass any go files to build, then print our usage message and
# exit the script
if [[ "$GOPROGS" = "" ]] &&
   [[ "$TESTS" == "" ]]  &&
   [[ "$CLEAN" != "1" ]]
then
  usage
  exit 1
fi

# If cleaning, cleanup then exit
if [[ "$CLEAN" = "1" ]]; then
  rm -rf ${BINDIR}
  rm -rf ${TESTSDIR}
  exit 1
fi

# A run helper to echo our command before executing it
# Build the run helper differently depending on whether verbose was passed in
if [[ "$VERBOSE" = "1" ]]; then
  run_helper() { echo "$@"; "$@"; }
else
  run_helper() { "$@"; }
fi

# Loop over all the arguments and assume they are standalone go files we want
# to build and install
if [[ "$GOPROGS" != "" ]]; then
  mkdir -p ${BINDIR}
  for i in ${GOPROGS}; do
    run_helper go-${GOOS}-${GOARCH} build $i
    i=${i##*/}
    i=${i%.go}
    mv $i ${BINDIR}
  done
fi

gen_test_script()
{
(cat << EOF
# Autogenerated test script for gotests
EOF
) > $1
}
append_test_script()
{
(cat << EOF

# Testing pkg${2#/gotests}
echo ""; echo "Testing pkg${2#/gotests}"
cd $2
./$3 -test.short -test.timeout=120s
cd - > /dev/null
EOF
) >> $1
}

# Build and install the specified tests
if [[ "$TESTS" != "" ]]; then
  if [[ "$TESTS" == "all" ]]; then
    cd ../src
    TESTS=$(find pkg -name "*_test.go" \
           | sed 's#\(.*\)/.*#\1#' \
           | sed 's/^pkg\///' \
           | grep -v 'runtime/race' \
           | grep -v 'net' \
           | grep -v 'os/exec' \
           | grep -v 'crypto/dsa' \
           | grep -v 'crypto/rsa' \
           | grep -v 'crypto/tls' \
           | grep -v 'crypto/x509' \
           | sort -u)
    cd - > /dev/null
  fi
  
  mkdir -p ${BINDIR}
  TESTSSCRIPT="${BINDIR}/gotests.sh"
  gen_test_script ${TESTSSCRIPT}
  for t in ${TESTS}; do
    run_helper go-${GOOS}-${GOARCH} test $t
    bin="${t##*/}.test"

    PKGTESTDIR="../src/pkg/$t"
    SUBTESTDIR="${TESTSDIR}/$t"
    run_helper mkdir -p ${SUBTESTDIR}
    run_helper mv $bin ${SUBTESTDIR}
    run_helper cp ${PKGTESTDIR}/*_test.go ${SUBTESTDIR}
    append_test_script $TESTSSCRIPT /${SUBTESTDIR#kfs/} $bin

    if [ $t = 'io/ioutil' ]; then
      run_helper cp ${PKGTESTDIR}/../*_test.go ${SUBTESTDIR}/..
    fi
    TESTDATADIR="${PKGTESTDIR}/testdata"
    if [ -d ${TESTDATADIR} ]; then
      run_helper cp -R ${TESTDATADIR} ${SUBTESTDIR}
    fi
    TESTDATADIR="${PKGTESTDIR}/../testdata"
    if [ -d ${TESTDATADIR} ]; then
      if [ ! -d "${SUBTESTDIR}/../testdata" ]; then
        run_helper cp -R ${TESTDATADIR} "${SUBTESTDIR}/.."
      fi
    fi
  done
fi

