#!/usr/bin/env bash
# Copyright 2013 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Trap and exit script if ^C sent
trap "exit 1" INT TERM

KFSROOT="kfs"
BINROOT="bin"
TESTSROOT="gotests"

BINDIR="${KFSROOT}/${BINROOT}"
TESTSDIR="${KFSROOT}/${TESTSROOT}"
eval $(go tool dist env)

# Print the usage information for this script
usage()
{
cat << EOF
This script will build and install a list of go programs into the local 'bin'
directory. The go files passed to this script must all be self contained, in
that the entire program is contained in a single file.
usage: $0 options
OPTIONS:
   -h      This is the default option
           Show this message
   -a      Build and install all *.go files in the current directory
   -b      Build and install the list of *.go files that follow this option.
           If you have more than one go file, wrap the list in double quotes
           (e.g. $0 -b "file1.go file2.go file3.go").
   -t      Build and install the specified test packages from \$GOROOT/src/pkg
           If you have more than one test, wrap the list in double quotes
           (e.g. $0 -t "archive/tar bufio").
           If the psuedo test 'all' is specified, then build all tests
   -c      Clean (i.e. remove the 'bin' and 'gotests' directories and all of
           their contents)
   -v      Verbose mode
EOF
}

# Source a local.bash file in case the user wants to put his environment
# variable setup in there
if [ -f ../src/local.bash ]; then
    source ../src/local.bash
fi

# Get the options from the command line
GOPROGS=""
TESTS=""
CLEAN=""
VERBOSE=""
while getopts “hab:t:cv” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         a)
             GOPROGS=`ls *.go`
             ;;
         b)
             GOPROGS="$OPTARG"
             ;;
         c)
             CLEAN=1
             ;;
         t)
             TESTS="$OPTARG"
             ;;
         v)
             VERBOSE=1
             ;;
     esac
done

# If we didn't pass any go files to build, then print our usage message and
# exit the script
if [[ "$GOPROGS" = "" ]] &&
   [[ "$TESTS" == "" ]]  &&
   [[ "$CLEAN" != "1" ]]
then
  usage
  exit 1
fi

# If cleaning, cleanup then exit
if [[ "$CLEAN" = "1" ]]; then
  rm -rf ${BINDIR}
  rm -rf ${TESTSDIR}
  if [[ -d ${KFSROOT}/${GOROOT} ]]; then
    rm -rf ${KFSROOT}/${GOROOT}
    cd ${KFSROOT}
    rmdir -p $(dirname ${GOROOT##/})
    cd ..
  fi
  exit 1
fi

# A run helper to echo our command before executing it
# Build the run helper differently depending on whether verbose was passed in
if [[ "$VERBOSE" = "1" ]]; then
  run_helper() { echo "$@"; "$@"; }
else
  run_helper() { "$@"; }
fi

# Loop over all the arguments and assume they are standalone go files we want
# to build and install
if [[ "$GOPROGS" != "" ]]; then
  mkdir -p ${BINDIR}
  for i in ${GOPROGS}; do
    run_helper go-${GOOS}-${GOARCH} build $i
    i=${i##*/}
    i=${i%.go}
    mv $i ${BINDIR}
  done
fi

gen_test_script()
{
(cat << EOF
# Autogenerated test script for gotests
export GOROOT=/mnt
export GOPATH=/mnt
export GOBIN=/bin
EOF
) > $1
}
append_test_script()
{
(cat << EOF

# Testing ${2#/${TESTSROOT}}
echo ""; echo "Testing ${2#/${TESTSROOT}/}"
cd $2
./$3 -test.short -test.timeout=120s
cd - > /dev/null
EOF
) >> $1
}

build_and_install_tests()
{
  local PKGNAME=$1
  local TESTS=$2
  for t in ${TESTS}; do
    if [ ${PKGNAME} != 'pkg' ]; then
      run_helper go-${GOOS}-${GOARCH} test ${PKGNAME}/$t
    else
      run_helper go-${GOOS}-${GOARCH} test $t
    fi
    local bin="${t##*/}.test"

    local PKGTESTDIR="../src/${PKGNAME}/$t"
    local SUBTESTDIR="${TESTSDIR}/${PKGNAME}/$t"
    if [ -e ${bin} ]; then
      run_helper mkdir -p ${SUBTESTDIR}
      run_helper mv $bin ${SUBTESTDIR}
      run_helper cp ${PKGTESTDIR}/*_test.go ${SUBTESTDIR}
      append_test_script $TESTSSCRIPT /${SUBTESTDIR#kfs/} $bin

      local TESTDATADIR="${PKGTESTDIR}/testdata"
      if [ -d ${TESTDATADIR} ]; then
        run_helper cp -R ${TESTDATADIR} ${SUBTESTDIR}
      fi
      TESTDATADIR="${PKGTESTDIR}/../testdata"
      if [ -d ${TESTDATADIR} ]; then
        if [ ! -d "${SUBTESTDIR}/../testdata" ]; then
          run_helper cp -R ${TESTDATADIR} "${SUBTESTDIR}/.."
        fi
      fi

      if [ $t = 'os' ]; then
        run_helper cp ${PKGTESTDIR}/*.go ${SUBTESTDIR}
      fi
      if [ $t = 'path/filepath' ]; then
        local FILEPATHTESTDIR="${GOROOT}/test"
        mkdir -p ${KFSROOT}/${FILEPATHTESTDIR}
        run_helper cp -R ${FILEPATHTESTDIR}/* ${KFSROOT}/${FILEPATHTESTDIR}
      fi
      if [ $t = 'io/ioutil' ]; then
        run_helper cp ${PKGTESTDIR}/../*_test.go ${SUBTESTDIR}/..
      fi
      if [ $t = 'go/parser' ]; then
        run_helper cp ${PKGTESTDIR}/interface.go ${SUBTESTDIR}
        run_helper cp ${PKGTESTDIR}/parser.go ${SUBTESTDIR}
      fi
      if [ $t = 'go/printer' ]; then
        run_helper cp ${PKGTESTDIR}/printer.go ${SUBTESTDIR}
      fi
      if [ $t = 'go/scanner' ]; then
        run_helper cp ${PKGTESTDIR}/scanner.go ${SUBTESTDIR}
      fi
      if [ $t = 'time' ]; then
        local TIMEZONEDIR="${GOROOT}/lib/time"
        mkdir -p ${KFSROOT}/${TIMEZONEDIR}
        run_helper cp ${TIMEZONEDIR}/zoneinfo.zip ${KFSROOT}/${TIMEZONEDIR}
      fi
    fi
  done
}

build_cpio()
{
  local HERE=${PWD}
  cd ${KFSROOT}
  find * | cpio -H newc -o > ${HERE}/gotests.cpio
  cd - > /dev/null
}

# Build and install the specified tests
mkdir -p ${BINDIR}
TESTSSCRIPT="${BINDIR}/gotests.sh"
gen_test_script ${TESTSSCRIPT}

if [[ "$TESTS" != "" ]]; then
  if [[ "$TESTS" == "all" ]]; then
    cd ../src
    CMDTESTS="
      addr2line
      cgo
      fix
      go
      gofmt
      link
      nm
      objdump
      pack
      yacc
    "
    PKGTESTS=$(find pkg -name "*_test.go" \
           | sed 's#\(.*\)/.*#\1#' \
           | sed 's/^pkg\///' \
           | sort -u)
    cd - > /dev/null
    build_and_install_tests "cmd" "$CMDTESTS"
    build_and_install_tests "pkg" "$PKGTESTS"
  else
    for t in ${TESTS}; do
      if [ -d "../src/pkg/$t" ]; then
        build_and_install_tests "pkg" "$t"
      else
        build_and_install_tests "${t%/*}" "${t#*/}"
      fi
    done
  fi
  build_cpio
fi

